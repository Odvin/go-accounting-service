// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: client-profile.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createClientProfile = `-- name: CreateClientProfile :one
INSERT INTO client.profile (
  id,
  adm,
  kyc,
  name,
  surname
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id
`

type CreateClientProfileParams struct {
	ID      uuid.UUID            `json:"id"`
	Adm     AdministrativeStatus `json:"adm"`
	Kyc     KycStatus            `json:"kyc"`
	Name    string               `json:"name"`
	Surname string               `json:"surname"`
}

func (q *Queries) CreateClientProfile(ctx context.Context, arg CreateClientProfileParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createClientProfile,
		arg.ID,
		arg.Adm,
		arg.Kyc,
		arg.Name,
		arg.Surname,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteCreateClientProfile = `-- name: DeleteCreateClientProfile :exec
DELETE FROM client.profile
WHERE id = $1
`

func (q *Queries) DeleteCreateClientProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCreateClientProfile, id)
	return err
}

const getClientProfile = `-- name: GetClientProfile :one
SELECT id, adm, kyc, name, surname, updated, created FROM client.profile
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClientProfile(ctx context.Context, id uuid.UUID) (ClientProfile, error) {
	row := q.db.QueryRow(ctx, getClientProfile, id)
	var i ClientProfile
	err := row.Scan(
		&i.ID,
		&i.Adm,
		&i.Kyc,
		&i.Name,
		&i.Surname,
		&i.Updated,
		&i.Created,
	)
	return i, err
}
