// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO client.session (
  id,
  sub,
  refresh,
  agent,
  ip,
  blocked,
  expires
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, sub, refresh, agent, ip, blocked, expires, created
`

type CreateSessionParams struct {
	ID      uuid.UUID `json:"id"`
	Sub     uuid.UUID `json:"sub"`
	Refresh string    `json:"refresh"`
	Agent   string    `json:"agent"`
	Ip      string    `json:"ip"`
	Blocked bool      `json:"blocked"`
	Expires time.Time `json:"expires"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (ClientSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.Sub,
		arg.Refresh,
		arg.Agent,
		arg.Ip,
		arg.Blocked,
		arg.Expires,
	)
	var i ClientSession
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.Refresh,
		&i.Agent,
		&i.Ip,
		&i.Blocked,
		&i.Expires,
		&i.Created,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, sub, refresh, agent, ip, blocked, expires, created FROM client.session
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (ClientSession, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i ClientSession
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.Refresh,
		&i.Agent,
		&i.Ip,
		&i.Blocked,
		&i.Expires,
		&i.Created,
	)
	return i, err
}
