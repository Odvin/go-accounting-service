// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AdministrativeStatus string

const (
	AdministrativeStatusAdmActive    AdministrativeStatus = "adm:active"
	AdministrativeStatusAdmBlocked   AdministrativeStatus = "adm:blocked"
	AdministrativeStatusAdmSuspended AdministrativeStatus = "adm:suspended"
	AdministrativeStatusAdmProcessed AdministrativeStatus = "adm:processed"
)

func (e *AdministrativeStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AdministrativeStatus(s)
	case string:
		*e = AdministrativeStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AdministrativeStatus: %T", src)
	}
	return nil
}

type NullAdministrativeStatus struct {
	AdministrativeStatus AdministrativeStatus `json:"administrative_status"`
	Valid                bool                 `json:"valid"` // Valid is true if AdministrativeStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAdministrativeStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AdministrativeStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AdministrativeStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAdministrativeStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AdministrativeStatus), nil
}

type KycStatus string

const (
	KycStatusKycUnconfirmed  KycStatus = "kyc:unconfirmed"
	KycStatusKycConfirmed    KycStatus = "kyc:confirmed"
	KycStatusKycPending      KycStatus = "kyc:pending"
	KycStatusKycRejected     KycStatus = "kyc:rejected"
	KycStatusKycResubmission KycStatus = "kyc:resubmission"
	KycStatusKycInitiated    KycStatus = "kyc:initiated"
)

func (e *KycStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = KycStatus(s)
	case string:
		*e = KycStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for KycStatus: %T", src)
	}
	return nil
}

type NullKycStatus struct {
	KycStatus KycStatus `json:"kyc_status"`
	Valid     bool      `json:"valid"` // Valid is true if KycStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKycStatus) Scan(value interface{}) error {
	if value == nil {
		ns.KycStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.KycStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKycStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.KycStatus), nil
}

// Account holders profile
type ClientProfile struct {
	ID uuid.UUID `json:"id"`
	// Client status set by the system admin
	Adm AdministrativeStatus `json:"adm"`
	// Client status from security service (Know Your Client)
	Kyc             KycStatus `json:"kyc"`
	Name            string    `json:"name"`
	Surname         string    `json:"surname"`
	Updated         time.Time `json:"updated"`
	Created         time.Time `json:"created"`
	Password        string    `json:"password"`
	Email           string    `json:"email"`
	PasswordUpdated time.Time `json:"password_updated"`
}
